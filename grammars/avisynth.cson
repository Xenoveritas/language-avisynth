'scopeName': 'source.avs'
'fileTypes': [
  'avs'
  'avsi'
]
'name': 'AviSynth'
'foldingStartMarker': '{|\\/\\*'
'foldingEndMarker': '}|\\*\\/'
'patterns': [
  {
    'include': '#comments'
  }
  {
    'include': '#nested_comments'
  }
  {
    'begin': '"""'
    'beginCaptures':
      '0': 'name': 'punctuation.definition.string.begin.avs'
    'end': '"""'
    'endCaptures':
      '0': 'name': 'punctuation.definition.string.end.avs'
    'name': 'string.quoted.triple.avs'
  }
  {
    'begin': '"'
    'beginCaptures':
      '0': 'name': 'punctuation.definition.string.begin.avs'
    'end': '"'
    'endCaptures':
      '0': 'name': 'punctuation.definition.string.end.avs'
    'name': 'string.quoted.double.avs'
  }
  {
    # function definition
    'begin': '\\b(?i:(function))\\s+([A-Za-z0-9_]+)(?:\\s*(\\(\\)))?',
    'beginCaptures':
      '1': 'name': 'storage.type.function.avs'
      '2': 'name': 'entity.name.function.avs'
      '3': 'name': 'punctuation.definition.arguments.avs'
    'end': '{'
    'endCaptures':
      '0': 'name': 'punctuation.definition.function.avs'
    'patterns': [
      'include': '#functionTypes'
    ]
  }
  {
    'name': 'constant.language.avs'
    'match': '\\b(?i:true|false|yes|no)\\b'
  }
  {
    'name': 'constant.numeric.avs'
    'match': '\\b[0-9]+(?:\\.[0-9]*)?\\b'
  }
  {
    # FIXME: I want to make this split sanely as right now something like
    # foo$AA00 will highlight even though it's actually wrong
    'name': 'constant.numeric.avs'
    'match': '\\$[0-9A-Fa-f]+\\b'
  }
  {
    'name': 'keyword.control.avs'
    'match': '\\b(?i:return|global|try|catch)\\b'
  }
  {
    'name': 'keyword.operator.comparison.avs'
    'match': '(!=|==|<|>|<=|>=)'
  }
  {
    'name': 'keyword.control.continuation.avs'
    'match': '(\\\\)\\s*$'
  }
  {
    'name': 'keyword.control.continuation.avs'
    'match': '^\\s*(\\\\)'
  }
  {
    'name': 'keyword.operator.arithmetic.avs'
    'match': '(\\-|\\+|\\*|\\/|%)'
  }
  {
    'name': 'keyword.control.ternary.avs'
    'match': '\\?|:'
  }
  {
    'name': 'keyword.operator.logical.avs'
    'match': '(!|&&|\\|\\|)'
  }
  {
    'name': 'meta.delimiter.method.period.avs'
    'match': '\\b\\.\\b'
  }
  {
    # A weird AviSynth construct which means "stop processing everything past here"
    'name': 'comment.line.end.avs'
    'begin': '__END__'
    'end': '[^\\s\\S]'
  }
  {
    # Special rule to capture patterns in ImageSource
    'begin': '\\b(?i:(ImageSource))\\s*(\\()\\s*(")'
    'beginCaptures':
      '0': 'name': 'source.avs'
      '1': 'name': 'support.function.filter.avs'
      '2': 'name': 'punctuation.definition.arguments.avs'
      '3': 'name': 'punctuation.definition.string.begin.avs'
    'contentName': 'string.quoted.double.avs'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.avs'
    'patterns': [
      {
        'include': '#interpolated_imagesource'
      }
    ]
  }
  {
    # A special rule for eval blocks
    'begin': '\\b(?i:(eval))\\s*\\(\\s*(""")',
    'beginCaptures':
      '1': 'name': 'support.function.control.avs'
      '2': 'name': 'string.quoted.triple.avs'
    'end': '(""")'
    'endCaptures':
      '1': "name": 'string.quoted.triple.avs'
    'patterns': [
      'include': 'source.avs'
    ]
  }
  # This doesn't really work so I'm not going to include it
  # {
  #   # A special rule for single line evals
  #   'begin': '\\b(?i:(eval))\\s*\\(\\s*(")',
  #   'beginCaptures':
  #     '1': 'name': 'support.function.control.avs'
  #     '2': 'name': 'string.quoted.double.avs'
  #   'end': '(")\\s*(\\))'
  #   'endCaptures':
  #     '1': "name": 'string.quoted.double.avs'
  #     '2': 'name': 'support.function.control.avs'
  #   'patterns': [
  #     'include': 'source.avs'
  #   ]
  # }
  {
    'name': 'variable.language.avs'
    'match': '\\b(?i:last)\\b'
  }
  {
    'match': '([A-Za-z0-9_]+)\\s*(=)'
    'captures':
      '1': 'name': 'variable.assignment.avs'
      '2': 'name': 'keyword.operator.assignment.avs'
  }
  {
    'include': '#builtins'
  }
]
'repository':
  'comments':
    'patterns': [
      {
        'begin': '/\\*'
        'captures':
          '0': 'name': 'punctuation.definition.comment.avs'
        'end': '\\*/'
        'name': 'comment.block.avs'
      }
      {
        'begin': '#'
        'captures':
          '0': 'name': 'punctuation.definition.comment.avs'
        'end': '\\n'
        'name': 'comment.line.number-sign.avs'
        'patterns': [
          {
            # Highlight a common mistake
            'name': 'invalid.illegal.avs'
            'match': '\\\\[ \\t]*$'
          }
        ]
      }
    ]
  'nested_comments':
    'begin': '\\[\\*'
    'captures':
      '0':
        'name': 'punctuation.definition.comment.avs'
    'end': '\\*\\]'
    'name': 'comment.block.avs'
    'patterns': [
      'include': '#nested_comments'
    ]
  'builtins':
    'patterns': [
      {
        'include': 'source.builtins.avs'
      }
    ]
  'interpolated_imagesource':
    'name': 'string.quoted.double.avs'
    'patterns': [
      {
        'match': '%%'
        'name': 'constant.other.placeholder.avs'
      }
      {
        # FIXME: I have no idea which numeric matches are actually allowed
        'match': '%[0 #+-]*(?:\\d*+|\\*)?(?:\\.(?:\\d+|\\*))?(?:hh?|ll?|j|z|t|L)?[diuoxXfFeEgGaA]'
        'name': 'constant.other.placeholder.avs'
      }
      {
        # FIXME: This should ALSO catch valid numeric items after the first match
        'match': '%[0 #+-]*(?:\\d*+|\\*)?(?:\\.(?:\\d+|\\*))?(?:hh?|ll?|j|z|t|L)?[^diuoxXfFeEgGaA]'
        'name': 'invalid.illegal.avs'
      }
    ]
  'functionTypes':
    'match': '\\b((?i:clip|int|float|string|bool|val))\\s+([\\w_]+|"[\\w_]+")'
    'captures':
      '1': 'name': 'storage.type.avs'
      '2': 'name': 'variable.parameter.function.avs'
