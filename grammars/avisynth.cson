'scopeName': 'source.avs'
'fileTypes': [
  'avs'
  'avsi'
]
'name': 'AviSynth'
'foldingStartMarker': '{|\\/\\*'
'foldingEndMarker': '}|\\*\\/'
'patterns': [
  {
    'include': '#comments'
  }
  {
    'include': '#nested_comments'
  }
  {
    'begin': '"""'
    'beginCaptures':
      '0': 'name': 'punctuation.definition.string.begin.avs'
    'end': '"""'
    'endCaptures':
      '0': 'name': 'punctuation.definition.string.end.avs'
    'name': 'string.quoted.triple.avs'
  }
  {
    'begin': '"'
    'beginCaptures':
      '0': 'name': 'punctuation.definition.string.begin.avs'
    'end': '"'
    'endCaptures':
      '0': 'name': 'punctuation.definition.string.end.avs'
    'name': 'string.quoted.double.avs'
  }
  {
    # function definition
    'begin': '\\b(?i:(function))\\s+([A-Za-z0-9_]+)(?:\\s*(\\(\\)))?',
    'beginCaptures':
      '1': 'name': 'storage.type.function.avs'
      '2': 'name': 'entity.name.function.avs'
      '3': 'name': 'punctuation.definition.arguments.avs'
    'end': '{'
    'endCaptures':
      '0': 'name': 'punctuation.definition.function.avs'
    'patterns': [
      'include': '#functionTypes'
    ]
  }
  {
    'name': 'constant.language.avs'
    'match': '\\b(?i:true|false|yes|no)\\b'
  }
  {
    'name': 'constant.numeric.avs'
    'match': '\\b[0-9]+(?:\\.[0-9]*)?\\b'
  }
  {
    # FIXME: I want to make this split sanely as right now something like
    # foo$AA00 will highlight even though it's actually wrong
    'name': 'constant.numeric.avs'
    'match': '\\$[0-9A-Fa-f]+\\b'
  }
  {
    'name': 'keyword.control.avs'
    'match': '\\b(?i:return|global|try|catch)\\b'
  }
  {
    'name': 'keyword.operator.comparison.avs'
    'match': '(!=|==|<|>|<=|>=)'
  }
  {
    'name': 'keyword.control.continuation.avs'
    'match': '(\\\\)\\s*$'
  }
  {
    'name': 'keyword.control.continuation.avs'
    'match': '^\\s*(\\\\)'
  }
  {
    'name': 'keyword.operator.arithmetic.avs'
    'match': '(\\-|\\+|\\*|\\/|%)'
  }
  {
    'name': 'keyword.control.ternary.avs'
    'match': '\\?|:'
  }
  {
    'name': 'keyword.operator.logical.avs'
    'match': '(!|&&|\\|\\|)'
  }
  {
    'name': 'meta.delimiter.method.period.avs'
    'match': '\\b\\.\\b'
  }
  {
    # A weird AviSynth construct which means "stop processing everything past here"
    'name': 'comment.line.end.avs'
    'begin': '__END__'
    'end': '[^\\s\\S]'
  }
  {
    # Special rule to capture patterns in ImageSource
    'begin': '\\b(?i:(ImageSource))\\s*(\\()\\s*(")'
    'beginCaptures':
      '0': 'name': 'source.avs'
      '1': 'name': 'support.function.filter.avs'
      '2': 'name': 'punctuation.definition.arguments.avs'
      '3': 'name': 'punctuation.definition.string.begin.avs'
    'contentName': 'string.quoted.double.avs'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.avs'
    'patterns': [
      {
        'include': '#interpolated_imagesource'
      }
    ]
  }
  {
    # A special rule for eval blocks
    'begin': '\\b(?i:(eval))\\s*\\(\\s*(""")',
    'beginCaptures':
      '1': 'name': 'support.function.control.avs'
      '2': 'name': 'string.quoted.triple.avs'
    'end': '(""")'
    'endCaptures':
      '1': "name": 'string.quoted.triple.avs'
    'patterns': [
      'include': 'source.avs'
    ]
  }
  # This doesn't really work so I'm not going to include it
  # {
  #   # A special rule for single line evals
  #   'begin': '\\b(?i:(eval))\\s*\\(\\s*(")',
  #   'beginCaptures':
  #     '1': 'name': 'support.function.control.avs'
  #     '2': 'name': 'string.quoted.double.avs'
  #   'end': '(")\\s*(\\))'
  #   'endCaptures':
  #     '1': "name": 'string.quoted.double.avs'
  #     '2': 'name': 'support.function.control.avs'
  #   'patterns': [
  #     'include': 'source.avs'
  #   ]
  # }
  {
    'name': 'variable.language.avs'
    'match': '\\b(?i:last)\\b'
  }
  {
    'match': '([A-Za-z0-9_]+)\\s*(=)'
    'captures':
      '1': 'name': 'variable.assignment.avs'
      '2': 'name': 'keyword.operator.assignment.avs'
  }
  {
    'include': '#builtins'
  }
]
'repository':
  'comments':
    'patterns': [
      {
        'begin': '/\\*'
        'captures':
          '0': 'name': 'punctuation.definition.comment.avs'
        'end': '\\*/'
        'name': 'comment.block.avs'
      }
      {
        'begin': '#'
        'captures':
          '0': 'name': 'punctuation.definition.comment.avs'
        'end': '\\n'
        'name': 'comment.line.number-sign.avs'
        'patterns': [
          {
            # Highlight a common mistake
            'name': 'invalid.illegal.avs'
            'match': '\\\\[ \\t]*$'
          }
        ]
      }
    ]
  'nested_comments':
    'begin': '\\[\\*'
    'captures':
      '0':
        'name': 'punctuation.definition.comment.avs'
    'end': '\\*\\]'
    'name': 'comment.block.avs'
    'patterns': [
      'include': '#nested_comments'
    ]
  'builtins':
    'patterns': [
      {
        'name': 'function.support.avs'
        'match': '\\b(?i:a(?:bs|cos|ddborders|lignedsplice|mplify(?:db)?|nimate|pply(?:range)?|s(?:in|s(?:ert|ume(?:bff|f(?:ieldbased|ps|ramebased)|s(?:amplerate|caledfps)|tff)))|tan(?:2)?|udio(?:bits|channels|dub(?:ex)?|length(?:f)?|rate|trim)|v(?:erage(?:chroma(?:u|v)|luma)|i(?:filesource|source)))|b(?:i(?:cubicresize|linearresize|t(?:and|c(?:h(?:ange|g)|l(?:ear|r))|l(?:rotate|shift)|not|or|r(?:o(?:l|r)|rotate|shift(?:a|l|s|u))|s(?:a(?:l|r)|et|h(?:l|r))|t(?:est|st)|xor))|l(?:a(?:ck(?:manresize|ness)|nkclip)|ur)|ob)|c(?:eil|h(?:angefps|r(?:oma(?:udifference|vdifference))?)|o(?:lor(?:bars(?:hd)?|keymask|yuv)|mp(?:are|lementparity)|n(?:ditional(?:filter|reader|select)|tinued(?:denominator|numerator)|vert(?:audioto(?:16bit|24bit|32bit|8bit|float)|backtoyuy2|fps|to(?:mono|rgb(?:24|32)?|y(?:8|uy2|v(?:1(?:2|6)|24|411)))))|s(?:h)?)|rop(?:bottom)?)|d(?:e(?:f(?:ault|ined)|l(?:ayaudio|eteframe))|i(?:rectshowsource|ssolve)|oubleweave|uplicateframe)|e(?:cho|nsurevbrmp3sync|val|x(?:ist|p))|f(?:ade(?:i(?:n(?:0|2)?|o(?:0|2)?)|out(?:0|2)?)|i(?:llstr|ndstr|x(?:brokenchromaupsampling|luminance))|l(?:ip(?:horizontal|vertical)|o(?:at|or))|mod|r(?:a(?:c|me(?:count|evaluate|rate(?:denominator|numerator)?))|eezeframe))|g(?:aussresize|e(?:neralconvolution|t(?:channel|parity))|reyscale)|h(?:as(?:audio|video)|e(?:ight|x(?:value)?)|istogram|orizontalreduceby2)|i(?:m(?:age(?:reader|source(?:anim)?|writer)|port)|n(?:fo|t(?:erleave)?|vert)|s(?:audio(?:float|int)|bool|clip|f(?:ieldbased|loat|ramebased)|int(?:erleaved)?|planar|rgb(?:24|32)?|string|y(?:u(?:v|y2)|v12)))|kill(?:audio|video)|l(?:a(?:nczos(?:4resize|resize)|yer)|case|e(?:ftstr|tterbox|vels)|imiter|o(?:ad(?:_stdcall_plugin|cplugin|plugin|v(?:fapiplugin|irtualdubplugin))|g(?:10)?|op)|umadifference)|m(?:a(?:sk(?:hs)?|x)|e(?:rge(?:argb|ch(?:annels|roma)|luma|rgb)?|ssageclip)|i(?:dstr|n|xaudio)|uldiv)|no(?:p|rmalize)|o(?:pendmlsource|rd|verlay)|p(?:eculiarblend|i|o(?:intresize|w)|reroll|ulldown)|r(?:and|e(?:duceby2|s(?:ampleaudio|etmask)|v(?:erse|str))|gb(?:adjust|difference(?:fromprevious|tonext)?)|ightstr|ound)|s(?:cript(?:clip|dir|file|name)|e(?:gmented(?:avisource|directshowsource)|lect(?:eve(?:n|ry)|odd|rangeevery)?|parate(?:columns|fields|rows)|t(?:memorymax|planarlegacyalignment|workingdir))|h(?:arpen|ow(?:alpha|blue|f(?:iveversions|ramenumber)|green|red|smpte|time))|i(?:gn|n(?:cresize|h)?)|kewrows|oundout|p(?:atialsoften|line(?:16resize|36resize|64resize)?)|qrt|src|t(?:ack(?:horizontal|vertical)|r(?:cmp(?:i)?|ing|len))|u(?:bt(?:itle|ract)|pereq)|wap(?:fields|uv))|t(?:a(?:n(?:h)?|u)|cpdeliver|emporalsoften|ime(?:stretch)?|one|rim|urn(?:180|left|right)|weak)|u(?:case|difference(?:fromprevious|tonext)|n(?:alignedsplice|defined)|planem(?:ax|edian|in(?:maxdifference)?)|toy(?:8)?)|v(?:alue|difference(?:fromprevious|tonext)|er(?:sion(?:number|string)?|ticalreduceby2)|planem(?:ax|edian|in(?:maxdifference)?)|toy(?:8)?)|w(?:avsource|eave(?:columns|rows)?|idth|ritefile(?:end|if|start)?)|y(?:difference(?:fromprevious|tonext)|planem(?:ax|edian|in(?:maxdifference)?)|touv))\\b'
      }
      {
        'name': 'variable.support.avs'
        'match': '\\b(?i:opt_(?:a(?:llowfloataudio|vipadscanlines)|dwchannelmask|usewaveextensible|vdubplanarhack))\\b'
      }
    ]
  'interpolated_imagesource':
    'name': 'string.quoted.double.avs'
    'patterns': [
      {
        'match': '%%'
        'name': 'constant.other.placeholder.avs'
      }
      {
        # FIXME: I have no idea which numeric matches are actually allowed
        'match': '%[0 #+-]*(?:\\d*+|\\*)?(?:\\.(?:\\d+|\\*))?(?:hh?|ll?|j|z|t|L)?[diuoxXfFeEgGaA]'
        'name': 'constant.other.placeholder.avs'
      }
      {
        # FIXME: This should ALSO catch valid numeric items after the first match
        'match': '%[0 #+-]*(?:\\d*+|\\*)?(?:\\.(?:\\d+|\\*))?(?:hh?|ll?|j|z|t|L)?[^diuoxXfFeEgGaA]'
        'name': 'invalid.illegal.avs'
      }
    ]
  'functionTypes':
    'match': '\\b((?i:clip|int|float|string|bool|val))\\s+([\\w_]+|"[\\w_]+")'
    'captures':
      '1': 'name': 'storage.type.avs'
      '2': 'name': 'variable.parameter.function.avs'
